setwd("D:/02_Programiranje/APA-tables-and-graphs/r_graph_maker")
library(ggplot2)
library(readxl)
library(writexl)
library(ggpattern)
# Graph 2: APA-style bar chart for multiple items (now with grayscale)
plot_apa_bar <- function(labels, values, width = 6, height = 4, filename = NULL) {
data <- data.frame(
Label = factor(labels, levels = labels),
Value = values
)
p <- ggplot(data, aes(x = Label, y = Value, fill = Label)) +
geom_col(width = 0.5, color = "black") +
geom_text(aes(label = Value), vjust = -0.5, size = 4, family = "Times New Roman") +
scale_fill_grey(start = 0.2, end = 0.8) +
scale_y_continuous(limits = c(0, max(values) * 1.1)) +
theme_classic(base_size = 14, base_family = "Times New Roman") +
labs(
title = NULL,
x = NULL,
y = "Frequency of correct answers"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(face = "bold"),
axis.line = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray85", linetype = "dotted", size = 0.5),
panel.grid.minor = element_blank(),
plot.margin = margin(10, 10, 10, 10),
legend.position = "none"
)
if (!is.null(filename)) {
ggsave(filename, plot = p, width = width, height = height, dpi = 300)
}
return(p)
}
# Graph 3: APA-style comparison of two items, keep the original colors
plot_apa_two_item <- function(name1, val1, name2, val2,
color1 = "#106464", color2 = "gray85",
width = 6, height = 4, filename = NULL) {
data <- data.frame(
Label = factor(c(name1, name2), levels = c(name1, name2)),
Value = c(val1, val2)
)
p <- ggplot(data, aes(x = Label, y = Value, fill = Label)) +
geom_col(width = 0.5, color = "black") +
geom_text(aes(label = Value), vjust = -0.5, size = 4, family = "Times New Roman") +
scale_fill_manual(values = c(color1, color2)) +
scale_y_continuous(limits = c(0, max(data$Value) * 1.1)) +
labs(
title = NULL,
x = NULL,
y = "Frequency of correct answers"
) +
theme_classic(base_size = 14, base_family = "Times New Roman") +
theme(
axis.title.y = element_text(face = "bold"),
axis.text = element_text(size = 12),
axis.line = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray85", linetype = "dotted", size = 0.5),
panel.grid.minor = element_blank(),
plot.margin = margin(10, 10, 10, 10),
legend.position = "none"
)
if (!is.null(filename)) {
ggsave(filename, plot = p, width = width, height = height, dpi = 300)
}
return(p)
}
# -----------------------------
# 2. Create an Excel Template
# -----------------------------
# Run this function once to create a template Excel file you can fill in.
# The file will have two sheets:
#   - "Graph2": For the multi-item bar chart (Graph 2). Fill in the labels and corresponding scores.
#   - "Graph3": For the two-item comparison (Graph 3). Fill in the names (e.g., "Joy", "Fear") and their frequencies.
create_excel_template <- function(filename = "data_template.xlsx") {
# Template for Graph 2
template_graph2 <- data.frame(
Label = c("4o", "o3-mini-pro", "Gemma", "Gemini Flash", "DeepSeek"),
Value = c(0, 0, 0, 0, 0)  # Replace zeros with your actual scores
)
# Template for Graph 3
template_graph3 <- data.frame(
Name = c("Joy", "Fear"),
Value = c(0, 0)  # Replace zeros with your actual data
)
# Create a list of sheets
sheets <- list(Graph2 = template_graph2, Graph3 = template_graph3)
# Write the Excel file to disk
write_xlsx(sheets, path = filename)
message("Excel template created as: ", filename)
}
# -----------------------------
# 3. Read the Excel File & Generate Plots
# -----------------------------
# This function reads your filled Excel template (placed in the same directory)
# and generates both plots.
generate_plots_from_excel <- function(file_path = "data_template.xlsx") {
# Read data for Graph 2
data_graph2 <- read_xlsx(file_path, sheet = "Graph2")
p1 <- plot_apa_bar(labels = data_graph2$Label,
values = data_graph2$Value)
# Read data for Graph 3
data_graph3 <- read_xlsx(file_path, sheet = "Graph3")
if (nrow(data_graph3) < 2) {
stop("The 'Graph3' sheet must contain at least two rows of data.")
}
p2 <- plot_apa_two_item(
name1 = data_graph3$Name[1],
val1 = data_graph3$Value[1],
name2 = data_graph3$Name[2],
val2 = data_graph3$Value[2]
)
return(list(Graph2 = p1, Graph3 = p2))
}
# Step 2: Open "data_template.xlsx", fill in your data for both Graph2 and Graph3, and save the file.
# Step 3: Place the filled Excel file in the same directory as this script.
# Step 4: Run the following to generate and view your plots:
plots <- generate_plots_from_excel("data_template.xlsx")
print(plots$Graph2)
print(plots$Graph3)
# Load required libraries
library(ggplot2)
library(dplyr)
# Define data with SD
data <- data.frame(
AgeGroup = rep(c("Adolescent", "Young Adult"), times = 6),
RiskLevel = factor(rep(c("Low Risk", "High Risk"), each = 6), levels = c("Low Risk", "High Risk")),
RewardSize = factor(rep(c("Small Reward", "Medium Reward", "Large Reward"), each = 2, times = 2),
levels = c("Small Reward", "Medium Reward", "Large Reward")),
FramingScore = c(
0.20, 0.30,  # Low Risk - Small
0.07, 0.27,  # Low Risk - Medium
0.09, 0.13,  # Low Risk - Large
0.14, 0.18,  # High Risk - Small
0.13, 0.15,  # High Risk - Medium
0.07, 0.15   # High Risk - Large
),
SD = c(
0.02, 0.025,
0.015, 0.02,
0.018, 0.02,
0.02, 0.025,
0.02, 0.02,
0.015, 0.02
)
)
# Plot
ggplot(data, aes(x = AgeGroup, y = FramingScore, fill = RewardSize)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
color = "black", width = 0.7) +
geom_errorbar(aes(ymin = FramingScore - SD, ymax = FramingScore + SD),
position = position_dodge(width = 0.8), width = 0.15) +
facet_wrap(~ RiskLevel) +
scale_fill_manual(values = c("white", "khaki1", "lightblue"),
name = "Reward Size") +
labs(
x = "Age Group",
y = "Framing Score"
) +
theme_classic(base_size = 14) +
theme(
strip.background = element_blank(),
strip.text = element_text(face = "bold", size = 14),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 12),
legend.position = "top",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12),
text = element_text(family = "Times")
)
######## GRAF 2
######## Primerjava vseh sistemov med seboj
library(ggplot2)
# APA-style bar chart for multiple items
plot_apa_bar <- function(labels, values, title = "Emotional response to scene",
width = 6, height = 4, filename = NULL) {
data <- data.frame(
Label = factor(labels, levels = labels),
Value = values
)
p <- ggplot(data, aes(x = Label, y = Value)) +
geom_col(fill = "gray70", width = 0.7, color = "black") +
theme_classic(base_size = 14, base_family = "Times") +
labs(
title = title,
x = NULL,
y = "Score"
) +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.line = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90", linetype = "dotted"),
plot.margin = margin(10, 10, 10, 10)
)
# Optional save
if (!is.null(filename)) {
ggsave(filename, plot = p, width = width, height = height, dpi = 300)
}
return(p)
}
# Example call
plot_apa_bar(
labels = c("4o", "o3-mini-pro", "Gemma", "Gemini Flash", "DeepSeek"),
values = c(140, 122, 129, 145, 125)
)
plot_apa_two_item <- function(name1, val1, name2, val2,
color1 = "gray60", color2 = "gray85",
width = 6, height = 4, filename = NULL) {
data <- data.frame(
Label = factor(c(name1, name2), levels = c(name1, name2)),
Value = c(val1, val2)
)
p <- ggplot(data, aes(x = Label, y = Value)) +
geom_col(aes(fill = Label), width = 0.5, color = "black") +
geom_text(aes(label = Value), vjust = -0.4, size = 5, family = "serif") +
scale_fill_manual(values = c(color1, color2)) +
labs(
x = NULL,
y = "Frequency"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(
axis.title.y = element_text(face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none",
panel.grid.major.y = element_line(color = "gray85", linetype = "dotted"),
plot.margin = margin(10, 10, 10, 10),
plot.title = element_blank()
)
if (!is.null(filename)) {
ggsave(filename, plot = p, width = width, height = height, dpi = 300)
}
return(p)
}
# Example
plot_apa_two_item("Joy", 5, "Fear", 2)
# Graph 2: APA-style bar chart for multiple items (now with grayscale)
plot_apa_bar <- function(labels, values, width = 6, height = 4, filename = NULL) {
data <- data.frame(
Label = factor(labels, levels = labels),
Value = values
)
p <- ggplot(data, aes(x = Label, y = Value, fill = Label)) +
geom_col(width = 0.5, color = "black") +
geom_text(aes(label = Value), vjust = -0.5, size = 4, family = "Times New Roman") +
scale_fill_grey(start = 0.2, end = 0.8) +
scale_y_continuous(limits = c(0, max(values) * 1.1)) +
theme_classic(base_size = 14, base_family = "Times New Roman") +
labs(
title = NULL,
x = NULL,
y = "Frequency of correct answers"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(face = "bold"),
axis.line = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray85", linetype = "dotted", size = 0.5),
panel.grid.minor = element_blank(),
plot.margin = margin(10, 10, 10, 10),
legend.position = "none"
)
if (!is.null(filename)) {
ggsave(filename, plot = p, width = width, height = height, dpi = 300)
}
return(p)
}
# Graph 3: APA-style comparison of two items, keep the original colors
plot_apa_two_item <- function(name1, val1, name2, val2,
color1 = "#106464", color2 = "gray85",
width = 6, height = 4, filename = NULL) {
data <- data.frame(
Label = factor(c(name1, name2), levels = c(name1, name2)),
Value = c(val1, val2)
)
p <- ggplot(data, aes(x = Label, y = Value, fill = Label)) +
geom_col(width = 0.5, color = "black") +
geom_text(aes(label = Value), vjust = -0.5, size = 4, family = "Times New Roman") +
scale_fill_manual(values = c(color1, color2)) +
scale_y_continuous(limits = c(0, max(data$Value) * 1.1)) +
labs(
title = NULL,
x = NULL,
y = "Frequency of correct answers"
) +
theme_classic(base_size = 14, base_family = "Times New Roman") +
theme(
axis.title.y = element_text(face = "bold"),
axis.text = element_text(size = 12),
axis.line = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray85", linetype = "dotted", size = 0.5),
panel.grid.minor = element_blank(),
plot.margin = margin(10, 10, 10, 10),
legend.position = "none"
)
if (!is.null(filename)) {
ggsave(filename, plot = p, width = width, height = height, dpi = 300)
}
return(p)
}
# -----------------------------
# 2. Create an Excel Template
# -----------------------------
# Run this function once to create a template Excel file you can fill in.
# The file will have two sheets:
#   - "Graph2": For the multi-item bar chart (Graph 2). Fill in the labels and corresponding scores.
#   - "Graph3": For the two-item comparison (Graph 3). Fill in the names (e.g., "Joy", "Fear") and their frequencies.
create_excel_template <- function(filename = "data_template.xlsx") {
# Template for Graph 2
template_graph2 <- data.frame(
Label = c("4o", "o3-mini-pro", "Gemma", "Gemini Flash", "DeepSeek"),
Value = c(0, 0, 0, 0, 0)  # Replace zeros with your actual scores
)
# Template for Graph 3
template_graph3 <- data.frame(
Name = c("Joy", "Fear"),
Value = c(0, 0)  # Replace zeros with your actual data
)
# Create a list of sheets
sheets <- list(Graph2 = template_graph2, Graph3 = template_graph3)
# Write the Excel file to disk
write_xlsx(sheets, path = filename)
message("Excel template created as: ", filename)
}
# -----------------------------
# 3. Read the Excel File & Generate Plots
# -----------------------------
# This function reads your filled Excel template (placed in the same directory)
# and generates both plots.
generate_plots_from_excel <- function(file_path = "data_template.xlsx") {
# Read data for Graph 2
data_graph2 <- read_xlsx(file_path, sheet = "Graph2")
p1 <- plot_apa_bar(labels = data_graph2$Label,
values = data_graph2$Value)
# Read data for Graph 3
data_graph3 <- read_xlsx(file_path, sheet = "Graph3")
if (nrow(data_graph3) < 2) {
stop("The 'Graph3' sheet must contain at least two rows of data.")
}
p2 <- plot_apa_two_item(
name1 = data_graph3$Name[1],
val1 = data_graph3$Value[1],
name2 = data_graph3$Name[2],
val2 = data_graph3$Value[2]
)
return(list(Graph2 = p1, Graph3 = p2))
}
# -----------------------------
# USAGE:
# -----------------------------
# Step 1: Run this once to create the Excel template.
# Uncomment the following line to create the template:
create_excel_template("data_template.xlsx")
# Step 2: Open "data_template.xlsx", fill in your data for both Graph2 and Graph3, and save the file.
# Step 3: Place the filled Excel file in the same directory as this script.
# Step 4: Run the following to generate and view your plots:
plots <- generate_plots_from_excel("data_template.xlsx")
print(plots$Graph2)
print(plots$Graph3)
print(plots$Graph2)
print(plots$Graph3)
# Step 2: Open "data_template.xlsx", fill in your data for both Graph2 and Graph3, and save the file.
# Step 3: Place the filled Excel file in the same directory as this script.
# Step 4: Run the following to generate and view your plots:
plots <- generate_plots_from_excel("data_template.xlsx")
print(plots$Graph2)
print(plots$Graph3)
print(plots$Graph2)
# Step 2: Open "data_template.xlsx", fill in your data for both Graph2 and Graph3, and save the file.
# Step 3: Place the filled Excel file in the same directory as this script.
# Step 4: Run the following to generate and view your plots:
plots <- generate_plots_from_excel("data_template.xlsx")
print(plots$Graph2)
print(plots$Graph3)
print(plots$Graph2)
# Step 2: Open "data_template.xlsx", fill in your data for both Graph2 and Graph3, and save the file.
# Step 3: Place the filled Excel file in the same directory as this script.
# Step 4: Run the following to generate and view your plots:
plots <- generate_plots_from_excel("data_template.xlsx")
print(plots$Graph2)
print(plots$Graph3)
print(plots$Graph2)
print(plots$Graph3)
print(plots$Graph2)
print(plots$Graph3)
